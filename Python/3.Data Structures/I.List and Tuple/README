# **List**

A List is a mutable (changeable) sequence in Python.

It allows duplicate elements and can store heterogeneous data types (e.g., strings, integers, floats, etc.).

Lists are defined using square brackets: [].

# **Tuple**

A Tuple is an immutable sequence, meaning once created, it cannot be changed.

Like lists, tuples allow duplicates and heterogeneous elements.

Defined using parentheses: ().

## 2. Examples of List and Tuple

**ðŸ”¸ List Examples**

```
# List of numbers
numbers = [1, 2, 3, 4]

# Mixed list
mixed = [1, "hello", 3.14, True]

# Nested list
nested = [[1, 2], [3, 4]]

```

**ðŸ”¸ Tuple Examples**

```
# Tuple of numbers
numbers = (1, 2, 3)

# Mixed tuple
mixed = ("apple", 3.5, False)

# Tuple with one element (note the comma)
single = (5,)

```
## 3. How We Can Use Them

âœ… List Use-Cases
Storing and modifying dynamic data (e.g., a to-do list).

Frequently used when you need to append, remove, or sort data.

```
fruits = ["apple", "banana"]
fruits.append("cherry")  # Adding
fruits.remove("banana")  # Removing

```
âœ… Tuple Use-Cases
When you want to protect data from modification.

Often used as keys in dictionaries (since they're hashable).

Ideal for function return values involving multiple items.

```
def get_point():
    return (3, 5)

point = get_point()
x, y = point  # Tuple unpacking

```

## 4. Hidden Easy Tips & Tricks
ðŸ”¹ List Tips
Use list comprehension for compact looping:

```
squares = [x*x for x in range(5)]  # [0, 1, 4, 9, 16]
```

Use enumerate() to get index and value:

```
for index, value in enumerate(['a', 'b', 'c']):
    print(index, value)

```
Use zip() to iterate two lists in parallel:

```
names = ['Alice', 'Bob']
scores = [85, 90]
for name, score in zip(names, scores):
    print(f"{name}: {score}")

```

ðŸ”¹ Tuple Tips
Use tuples as immutable data holders (safer than lists).

Easily swap variables:

```
a, b = 5, 10
a, b = b, a  # Swaps values

```

Use unpacking in functions:

```
def greet(name, age):
    print(f"Hello {name}, age {age}")

info = ("Sam", 30)
greet(*info)  # Unpacks tuple into arguments

```

## 5. Conclusion

Lists are best when you need a flexible and editable data structure.

Tuples are better for fixed, read-only data that shouldn't change.

Both are essential and powerful in Python, often used in real-world apps, data processing, and even machine learning.

Mastering both helps write cleaner, safer, and more efficient code.