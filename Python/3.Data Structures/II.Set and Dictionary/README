# **Set**

A Set is an unordered collection of unique elements.

Sets are mutable, but the elements must be immutable (e.g., numbers, strings, tuples).

Defined using curly braces {} or the set() constructor.

No duplicate values are allowed.

# **Dictionary**

A Dictionary is a collection of key-value pairs.

Keys must be unique and immutable (e.g., strings, numbers, tuples).

Values can be of any data type and can be duplicated.

Defined using curly braces {key: value}.

## 2. Examples of Set and Dictionary

ðŸ”¸ Set Examples

```
# Creating a set
my_set = {1, 2, 3, 4}

# Duplicate values are ignored
unique_set = {1, 2, 2, 3}  # Result: {1, 2, 3}

```

ðŸ”¸ Dictionary Examples

```
# Creating a dictionary
student = {
    "name": "Alice",
    "age": 22,
    "grade": "A"
}

# Nested dictionary
person = {
    "name": "John",
    "address": {"city": "New York", "zip": "10001"}
}

```

## 3. How We Can Use Them

âœ… Set Use-Cases
Removing duplicates from a list.

Fast membership tests (in operator).

Performing set operations like union, intersection, difference.

```
a = {1, 2, 3}
b = {3, 4, 5}

print(a.union(b))        # {1, 2, 3, 4, 5}
print(a.intersection(b)) # {3}
print(a.difference(b))   # {1, 2}

```
âœ… Dictionary Use-Cases
Storing and retrieving data by key (e.g., user profile).

Efficient lookups and updates.

Used in real-world tasks like word count, frequency mapping, JSON-like data handling.

```
profile = {"name": "Emma", "age": 30}
print(profile["name"])  # Access value by key

# Add a new key
profile["city"] = "London"

```

## 4. Hidden Easy Tips & Tricks

ðŸ”¹ Set Tips
Convert a list to a set to remove duplicates:

```
nums = [1, 2, 2, 3]
unique = list(set(nums))  # [1, 2, 3]

```

Use set() with string for unique characters:

```
unique_chars = set("banana")  # {'a', 'n', 'b'}
```
Quickly check overlap:

```
if set(a) & set(b):  # intersection is not empty
    print("Common elements exist")

```

ðŸ”¹ Dictionary Tips
Use dictionary comprehension:
```
squares = {x: x*x for x in range(5)}  # {0: 0, 1: 1, 2: 4, 3: 9, 4: 16}
```
Use .get() to avoid KeyError:
```
profile.get("city", "Unknown")  # Returns default if key not found
```
Looping through items:
```
for key, value in student.items():
    print(f"{key}: {value}")
```

Merge two dictionaries (Python 3.9+):
```
dict1 = {"a": 1}
dict2 = {"b": 2}
combined = dict1 | dict2  # {'a': 1, 'b': 2}
```
## 5. Conclusion
Sets are best for handling unique, unordered data and performing mathematical set operations.

Dictionaries are ideal for storing structured, key-based data and are heavily used in real-world applications.

Both are efficient, fast, and flexible data structures.

Mastering them helps in building better algorithms, data pipelines, APIs, and more.

