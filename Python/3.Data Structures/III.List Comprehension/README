# **List Comprehension**

List Comprehension is a concise way to create lists in Python using a single line of code.

It replaces traditional loops (like for or while) used for building lists.

It follows the format:

```
[expression for item in iterable if condition]

```
This improves readability, reduces code length, and often boosts performance.

## 2. Examples of List Comprehension

âœ… Basic Examples

```
# Create a list of numbers from 0 to 4
nums = [x for x in range(5)]  # [0, 1, 2, 3, 4]

# Square of each number
squares = [x*x for x in range(5)]  # [0, 1, 4, 9, 16]

```
âœ… With Condition

```
# Get even numbers from 0 to 10
evens = [x for x in range(11) if x % 2 == 0]  # [0, 2, 4, 6, 8, 10]

# Filter names starting with 'A'
names = ["Alice", "Bob", "Anna", "Eve"]
a_names = [name for name in names if name.startswith("A")]  # ['Alice', 'Anna']

```
âœ… Nested Loops

```
# Cartesian product
pairs = [(x, y) for x in [1, 2] for y in [3, 4]]
# [(1, 3), (1, 4), (2, 3), (2, 4)]

```

## 3. How We Can Use It
ðŸ”¸ Real-World Usage
Transforming data (e.g., squaring, formatting strings).

Filtering data from a list.

Flattening nested lists.

Efficient in data processing, web scraping, machine learning preprocessing, etc.

ðŸ”¸ Examples

```
# Capitalize all names
names = ["john", "alice", "bob"]
capitalized = [name.capitalize() for name in names]

# Flatten a 2D list
matrix = [[1, 2], [3, 4]]
flat = [num for row in matrix for num in row]  # [1, 2, 3, 4]

```

## 4. Hidden Easy Tips & Tricks

ðŸ’¡ Tip 1: Add if-else inside

```
labels = ["even" if x % 2 == 0 else "odd" for x in range(5)]
# ['even', 'odd', 'even', 'odd', 'even']

```
ðŸ’¡ Tip 2: Use with strings
```
# Get all vowels from a string
vowels = [ch for ch in "education" if ch in "aeiou"]
# ['e', 'u', 'a', 'i', 'o']

```
ðŸ’¡ Tip 3: Dictionary comprehension
```
unique_letters = {ch for ch in "hello"}  # {'h', 'e', 'l', 'o'}

```
ðŸ’¡ Tip 4: Set comprehension
```
unique_letters = {ch for ch in "hello"}  # {'h', 'e', 'l', 'o'}

```
ðŸ’¡ Tip 5: Readability tip
Use list comprehension for simple logic. For complex operations, stick to regular loops for clarity.

## 5. Conclusion
List Comprehension is a powerful feature that allows writing clean, efficient, and expressive code.

It's especially useful for transforming, filtering, and generating new lists from iterables.

You can also extend this idea to dict and set comprehensions.

Keep your list comprehensions readableâ€”avoid nesting too deeply.